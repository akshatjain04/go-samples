/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

Scenario 1: Input is a palindrome
Given the input string "madam"
When it is passed to the function `IsPalindromeRecursive`
Then it should return true since "madam" is the same when read forward and backward.

Scenario 2: Input is not a palindrome
Given the input string "hello"
When they are passed to the function `IsPalindromeRecursive`
Then it should return false since "hello" is not the same when read forward and backward.

Scenario 3: Input has mixed case
Given the input string "Madam"
When it is passed to the function `IsPalindromeRecursive`
Then it should return true since "Madam" is the same when read forward and backward regardless of its case.

Scenario 4: Input contains non-alphanumerical character
Given the input string "A man, a plan, a canal, Panama"
When it is passed to the function `IsPalindromeRecursive`
Then it should return true since after removing the non-alphanumeric characters, the string becomes palindrome.

Scenario 5: Input is empty
Given the input string is empty
When it is passed into the `IsPalindromeRecursive` function
Then it should return true since an empty string can be considered a palindrome.

Scenario 6: Input is a single character
Given the input string is a single character "a"
When it is passed into the `IsPalindromeRecursive` function
Then it should return true since a single letter is considered a palindrome.

Scenario 7: Input is a number
Given the input string is a number "12321"
When it is passed into the `IsPalindromeRecursive` function
Then it should return true since "12321" is the same when read forward and backward.

Scenario 8: Input is a special character
Given the input string is a special character "$"
When it is passed into the `IsPalindromeRecursive` function
Then it should return true since a single special character is considered a palindrome.
*/
package palindrome

import (
	"testing"
)

func TestIsPalindromeRecursive_9c3315538c(t *testing.T) {
	testCases := []struct {
		name     string
		text     string
		expected bool
	}{
		{
			name:     "Scenario 1: Input is a palindrome",
			text:     "madam",
			expected: true,
		},
		{
			name:     "Scenario 2: Input is not a palindrome",
			text:     "hello",
			expected: false,
		},
		{
			name:     "Scenario 3: Input has mixed case",
			text:     "Madam",
			expected: true,
		},
		{
			name:     "Scenario 4: Input contains non-alphanumeric character",
			text:     "A man, a plan, a canal, Panama",
			expected: true,
		},
		{
			name:     "Scenario 5: Input is empty",
			text:     "",
			expected: true,
		},
		{
			name:     "Scenario 6: Input is a single character",
			text:     "a",
			expected: true,
		},
		{
			name:     "Scenario 7: Input is a number",
			text:     "12321",
			expected: true,
		},
		{
			name:     "Scenario 8: Input is a special character",
			text:     "$",
			expected: true,
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {
			actual := IsPalindromeRecursive(testCase.text)
			if actual != testCase.expected {
				t.Errorf("Test '%v' failed: expected %v, got %v", testCase.name, testCase.expected, actual)
			} else {
				t.Logf("Test '%s' passed", testCase.name)
			}
		})
	}
}
