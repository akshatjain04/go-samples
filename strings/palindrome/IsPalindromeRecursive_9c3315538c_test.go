/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

Test Scenario 1:
Input String: "madam"
Expected Output: true
Comment: The string "madam" is a palindrome, so it's expected to return true.

Test Scenario 2:
Input String: "hello"
Expected Output: false
Comment: The string "hello" is not a palindrome, so it's expected to return false.

Test Scenario 3:
Input String: "A man a plan a canal Panama"
Expected Output: true
Comment: This famous phrase, ignoring spaces, casing and punctuation, is a palindrome, so it's expected to return true.

Test Scenario 4:
Input String: ""
Expected Output: true
Comment: An empty string is considered a palindrome, so it's expected to return true.

Test Scenario 5:
Input String: "Able , was I saw Elba"
Expected Output: true
Comment: This phrase, ignoring spaces, casing and punctuation, is a palindrome, so it's expected to return true.

Test Scenario 6:
Input String: "Was it a car or a cat I saw?"
Expected Output: true
Comment: This phrase, ignoring spaces, casing, and punctuation, is a palindrome, so it's expected to return true.

Test Scenario 7:
Input String: "!@#$%^&*()_+"
Expected Output: true
Comment: A string with non-alphanumeric characters only, when cleaned, becomes an empty string, which is a palindrome, so it's expected to return true.

Test Scenario 8:
Input String: "Don't nod"
Expected Output: true
Comment: This phrase, ignoring spaces, casing and punctuation, is a palindrome, so it's expected to return true.

Note: These test scenarios make the assumption that the `cleanString` function mentioned in the stub removes all non-alphanumeric characters and converts the string to lowercase.
*/
package palindrome

import (
	"testing"
)

func TestIsPalindromeRecursive_9c3315538c(t *testing.T) {
	tests := []struct {
		name string
		text string
		want bool
	}{
		{
			name: "Test Scenario 1",
			text: "madam",
			want: true,
		},
		{
			name: "Test Scenario 2",
			text: "hello",
			want: false,
		},
		{
			name: "Test Scenario 3",
			text: "A man a plan a canal Panama",
			want: true,
		},
		{
			name: "Test Scenario 4",
			text: "",
			want: true,
		},
		{
			name: "Test Scenario 5",
			text: "Able , was I saw Elba",
			want: true,
		},
		{
			name: "Test Scenario 6",
			text: "Was it a car or a cat I saw?",
			want: true,
		},
		{
			name: "Test Scenario 7",
			text: "!@#$%^&*()_+",
			want: true,
		},
		{
			name: "Test Scenario 8",
			text: "Don't nod",
			want: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := IsPalindromeRecursive(tt.text); got != tt.want {
				t.Errorf("IsPalindromeRecursive() = %v, want %v for input %v", got, tt.want, tt.text)
			} else {
				t.Logf("Success: Expected output %v and got %v for input %v", tt.want, got, tt.text)
			}
		})
	}
}
