/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

 1. Test Case 1: All-Alphabet Palindrome
    Scenario: Check if the function correctly identifies all-alphabet palindromes.
    Example: The input "racecar" should return true.

 2. Test Case 2: Case-Insensitive Palindrome
    Scenario: Check if the function correctly identifies palindromes irrespective of letter casings.
    Example: The input "RaceCar" should return true.

 3. Test Case 3: Palindrome with Special Characters
    Scenario: Check if the function correctly identifies palindromes when special characters are involved.
    Example: The input "Able , was I saw elba" should return true.

 4. Test Case 4: Punctuation-Heavy Palindrome
    Scenario: Check if the function correctly identifies palindromes in sentences heavily laden with punctuation.
    Example: The input "Madam, in Eden, I'm Adam." should return true.

 5. Test Case 5: Non-Palindrome Strings
    Scenario: Check if the function correctly identifies non-palindrome strings.
    Example: The input "Golang" should return false.

 6. Test Case 6: Empty String
    Scenario: Check if the function correctly handles an empty string.
    Example: An input of "" should return true (since it can be considered as palindrome).

 7. Test Case 7: Single Character
    Scenario: Check if the function correctly handles a single character string.
    Example: An input of "a" should return true (since it can be considered as palindrome).

 8. Test Case 8: Multiple WhiteSpaces
    Scenario: Check how the function handles palindromes with multiple whitespace characters.
    Example: The input "   race car   " should return true.

 9. Test Case 9: Numeric Palindrome
    Scenario: Check how the function handles palindromes that are numeric.
    Example: The input "12321" should return true.

 10. Test Case 10: Palindrome with Unicode Characters
    Scenario: Check if the function correctly identifies palindromes with Unicode characters.
    Example: The input "åbba" should return true.
*/
package palindrome

import (
	"testing"
)

func TestIsPalindromeRecursive_9c3315538c(t *testing.T) {
	// Declaration of test cases
	testCases := []struct {
		input string
		want  bool
	}{
		{"racecar", true},                   // All-Alphabet Palindrome
		{"RaceCar", true},                   // Case-Insensitive Palindrome
		{"Able , was I saw elba", true},     // Palindrome with Special Characters
		{"Madam, in Eden, I'm Adam.", true}, // Punctuation-Heavy Palindrome
		{"Golang", false},                   // Non-Palindrome Strings
		{"", true},                          // Empty String
		{"a", true},                         // Single Character
		{"   race car   ", true},            // Multiple WhiteSpaces
		{"12321", true},                     // Numeric Palindrome
		{"åbba", true},                      // Palindrome with Unicode Characters
	}

	// Evaluation of test cases
	for _, tc := range testCases {
		t.Run(tc.input, func(t *testing.T) {
			got := IsPalindromeRecursive(tc.input)

			if got != tc.want {
				t.Errorf("IsPalindromeRecursive(%q) = %v; want %v", tc.input, got, tc.want)
			} else {
				t.Logf("Success: IsPalindromeRecursive(%q) = %v", tc.input, got)
			}
		})
	}
}
