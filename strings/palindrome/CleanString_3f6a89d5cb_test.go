/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Scenario: Check if the function is able to remove white spaces.
  - Input: "Hello World!"
  - Expectation: The output should be "helloworld"

2. Scenario: Check if the function converts all letters to lower case.
  - Input: "Hello WORLD!"
  - Expectation: The output should be "helloworld"

3. Scenario: Check if the function removes special characters.
  - Input: "N3xt-gen@ration_T3st!"
  - Expectation: The output should be "n3xtgenrationt3st"

4. Scenario: Check if the function is able to handle strings with symbols and numbers.
  - Input: "F1rst*T3st;"
  - Expectation: The output should be "f1rstt3st"

5. Scenario: Verify if the function can handle an empty input.
  - Input: ""
  - Expectation: The output should be an empty string ""

6. Scenario: Test case where input string is already a clean string.
  - Input: "cleanstring"
  - Expectation: The output should be "cleanstring"

7. Scenario: Check the function with a string of all special characters.
  - Input: "@#&*()^%"
  - Expectation: The output should be ""

8. Scenario: Verify the functionality of the function with numbers only in the string.
  - Input: "1234567890"
  - Expectation: The output should be "1234567890"

9. Scenario: Test the function with mixed type characters in the string (letters, numbers and special characters).
  - Input: "C0d3_With_G0!"
  - Expectation: The output should be "c0d3withg0"

10. Scenario: Check with strings of both upper and lower case characters, numbers, white spaces, and special characters.
  - Input: "T3St CAs3 4FunctI0n!"
  - Expectation: The output should be "t3stcas34functi0n"

11. Scenario: Test utf-8 or non-ASCII characters in string.
  - Input: "BjÃ¸rn"
  - Expectation: The output should be "bjÃ¸rn"

12. Scenario: Test string with emoji
  - Input: "helloðŸ˜ƒworld"
  - Expectation: The output should be "helloworld"
*/
package palindrome

import (
	"fmt"
	"testing"
)

func TestCleanString_3f6a89d5cb(t *testing.T) {
	var tests = []struct {
		input string
		want  string
	}{
		{"Hello World!", "helloworld"},
		{"Hello WORLD!", "helloworld"},
		{"N3xt-gen@ration_T3st!", "n3xtgenrationt3st"},
		{"F1rst*T3st;", "f1rstt3st"},
		{"", ""},
		{"cleanstring", "cleanstring"},
		{"@#&*()^%", ""},
		{"1234567890", "1234567890"},
		{"C0d3_With_G0!", "c0d3withg0"},
		{"T3St CAs3 4FunctI0n!", "t3stcas34functi0n"},
		{"BjÃ¸rn", "bjÃ¸rn"},
		{"helloðŸ˜ƒworld", "helloworld"},
	}

	for _, tt := range tests {
		testname := fmt.Sprintf("%s", tt.input)
		t.Run(testname, func(t *testing.T) {
			ans := cleanString(tt.input)
			if ans != tt.want {
				t.Errorf("got %s, expected %s", ans, tt.want)
			}
			t.Logf("Input: %s, Expected: %s, Got: %s", tt.input, tt.want, ans)
		})
	}
}
