/*
Test generated by RoostGPT for test go-samples-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Test whether `YIntercept` function correctly calculates the Y-intercept when given a point on the line and the slope. Use known values for comparison.

2. Test whether `YIntercept` function handles and returns correct Y-intercept when the X coordinate is zero.

3. Test whether `YIntercept` function handles and returns correct Y-intercept when the Y coordinate is zero.

4. Test whether `YIntercept` function handles and returns correct Y-intercept when the slope is zero.

5. Test whether `YIntercept` function handles and returns correct Y-intercept when the slope is a negative number.

6. Test whether `YIntercept` function handles and returns correct Y-intercept when the X coordinate is a negative number.

7. Test whether `YIntercept` function handles and returns correct Y-intercept when the Y coordinate is a negative number.

8. Edge case: Test if the function correctly handles when an input value is extremely large.

9. Edge case: Test if the function correctly handles when an input value is extremely small (close to zero).

10. Test whether `YIntercept` function throws an error or handles null values if a point with no value is given.

11. Test whether `YIntercept` function throws an error or handles null values if the slope is not given.

12. Test how the function handles when given non-numeric inputs for the point coordinates or the slope.

13. Test the function with floating point numbers to check if it still returns accurate results.
*/
package geometry

import (
	"math"
	"testing"
)

func TestYIntercept_1564b1e48f(t *testing.T) {
	tests := []struct {
		name     string
		p        *Point
		slope    float64
		expected float64
	}{
		{
			name:     "Standard_Test",
			p:        &Point{X: 2, Y: 3},
			slope:    1,
			expected: 1,
		},
		{
			name:     "X_Coordinate_Zero_Test",
			p:        &Point{X: 0, Y: 5},
			slope:    2,
			expected: 5,
		},
		{
			name:     "Y_Coordinate_Zero_Test",
			p:        &Point{X: 4, Y: 0},
			slope:    3,
			expected: -12,
		},
		{
			name:     "Slope_Zero_Test",
			p:        &Point{X: 3, Y: 2},
			slope:    0,
			expected: 2,
		},
		{
			name:     "Negative_Slope_Test",
			p:        &Point{X: 2, Y: 3},
			slope:    -1,
			expected: 5,
		},
		{
			name:     "Negative_X_Coordinate_Test",
			p:        &Point{X: -2, Y: 3},
			slope:    1,
			expected: 5,
		},
		{
			name:     "Negative_Y_Coordinate_Test",
			p:        &Point{X: 2, Y: -3},
			slope:    1,
			expected: -5,
		},
		{
			name:     "Extremely_Large_Input_Value_Test",
			p:        &Point{X: math.MaxFloat64, Y: math.MaxFloat64},
			slope:    math.MaxFloat64,
			expected: 0,
		},
		{
			name:     "Extremely_Small_Input_Value_Test",
			p:        &Point{X: math.SmallestNonzeroFloat64, Y: math.SmallestNonzeroFloat64},
			slope:    math.SmallestNonzeroFloat64,
			expected: 0,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {

			// prevent panic on nil point
			defer func() {
				if r := recover(); r != nil {
					t.Errorf("YIntercept panicked with message %v", r)
				}
			}()

			if got := YIntercept(tt.p, tt.slope); got != tt.expected {
				t.Errorf("YIntercept() = %v, want %v", got, tt.expected)
			}
		})
	}
}
