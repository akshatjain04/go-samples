/*
Test generated by RoostGPT for test go-samples-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Scenario: Both Points are at the origin (0,0)
  - Given two Points "a" and "b" at (0,0)
  - Call Distance function using points "a" and "b"
  - Expect the result to be 0.0

2. Scenario: Both Points are at the same location but not the origin
  - Given two Points "a" and "b" at (4,3)
  - Call Distance function using point "a" and "b"
  - Expect the result to be 0.0

3. Scenario: Two Points are at different locations
  - Given point "a" at (1,2) and point "b" at (4,6)
  - Call Distance function using point "a" and "b"
  - Expect the result to equal the calculated Euclidean distance

4. Scenario: Points are at negative coordinates
  - Given point "a" at (-2, -3) and point "b" at (-5, -7)
  - Call Distance function using point "a" and "b"
  - Expect the result to equal the calculated Euclidean distance

5. Scenario: Distance from positive to negative coordinates
  - Given point "a" at (5, 7) and point "b" at (-3, -2)
  - Call Distance function using point "a" and "b"
  - Expect the result to equal the calculated Euclidean distance

6. Scenario: Distance when one of the coordinates (X or Y) of both points is the same
  - Given point "a" at (3,6) and point "b" at (3, -1)
  - Call Distance function using point "a" and "b"
  - Expect the result to equal the calculated Euclidean distance

7. Scenario: Distance between a point and itself
  - Given a point "a" at (3, 3)
  - Call Distance function using point "a" and "a"
  - Expect the result to be 0.0

8. Scenario: Distance between two extremely close points
  - Given point "a" at (1.0001, 1.0001) and point "b" at (1.000102, 1.000104)
  - Call Distance function using point "a" and "b"
  - Expect the result to not be 0 despite the small decimal differences
*/
package geometry

import (
	"math"
	"testing"
)

func TestDistance_3fc242e7c9(t *testing.T) {
	var tests = []struct {
		a      *Point
		b      *Point
		expect float64
	}{
		{&Point{0, 0}, &Point{0, 0}, 0},
		{&Point{4, 3}, &Point{4, 3}, 0},
		{&Point{1, 2}, &Point{4, 6}, 5},
		{&Point{-2, -3}, &Point{-5, -7}, 5},
		{&Point{5, 7}, &Point{-3, -2}, 10.63014581273465},
		{&Point{3, 6}, &Point{3, -1}, 7},
		{&Point{3, 3}, &Point{3, 3}, 0},
		{&Point{1.0001, 1.0001}, &Point{1.000102, 1.000104}, 0.0000028284271249},
	}

	for i, test := range tests {
		if output := Distance(test.a, test.b); math.Abs(output-test.expect) > 1e-8 {
			t.Errorf("Test %d: expected %.12f, got %.12f", i+1, test.expect, output)
		} else {
			t.Logf("Test %d: success, expected %.12f and got %.12f", i+1, test.expect, output)
		}
	}
}
