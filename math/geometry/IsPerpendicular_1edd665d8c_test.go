/*
Test generated by RoostGPT for test go-samples-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

1. Check when both lines are perpendicular: Initialize two lines (for example l1: [(0,0), (3,3)] and l2: [(0,0), (4,-4)]) and pass them as inputs to the IsPerpendicular function. This scenario is expected to return true because these two lines are perpendicular.

2. Check when both lines aren't perpendicular: Provide inputs to the IsPerpendicular function that aren't perpendicular (for example l1: [(0,0), (3,3)] and l2: [(0,0), (3,3)]). This test case should return false because the lines are parallel, not perpendicular.

3. Check when both input lines have the same position: If the input lines have the same starting and ending points, the scenario should return false (e.g., l1: [(0,0), (3,3)] and l2: [(0,0), (3,3)]). This is because a single line can't be perpendicular to itself.

4. Check with horizontal and vertical lines: For example, l1 being a horizontal line [(0,0), (5,0)] and l2 being a vertical line [(2,2), (2,-2)]. Since these are perpendicular, the function should return true.

5. Check on providing lines with negative coordinates. For example l1: [(-1,-1), (-4,-4)] and l2: [(-1,-1), (-2,2)]. This should return true as both lines are perpendicular.

6. Check where one of the lines is a point, i.e., its starting and ending points are the same. This should return false, as a point cannot be perpendicular to a line.

7. Check with lines that have decimal coordinates. For example l1: [(0.5,0.5), (3.5,3.5)] and l2: [(0.5,0.5), (4.5,-4.5)]. The function should return true as these lines are perpendicular to each other.

8. Check with lines that have zero slope. For such lines, the function should work correctly and return false if they are not perpendicular and true if they are.

9. Check if the function handles nil input correctly. The function should return false or throw an error if either of the arguments is nil.

10. Give abnormal inputs that might cause an overflow in the slope calculation (for instance, extremely large coordinate points). The function should still function properly without any execution error.
*/
package geometry

import (
	"testing"
)

// Define the test method
func TestIsPerpendicular_1edd665d8c(t *testing.T) {
	// Test cases
	tests := []struct {
		name string
		l1   *Line
		l2   *Line
		want bool
	}{
		{
			"both lines are perpendicular",
			&Line{Point{0, 0}, Point{3, 3}},
			&Line{Point{0, 0}, Point{4, -4}},
			true,
		},
		{
			"both lines aren't perpendicular",
			&Line{Point{0, 0}, Point{3, 3}},
			&Line{Point{0, 0}, Point{3, 3}},
			false,
		},
		{
			"both input lines have the same position",
			&Line{Point{0, 0}, Point{3, 3}},
			&Line{Point{0, 0}, Point{3, 3}},
			false,
		},
		{
			"horizontal and vertical lines",
			&Line{Point{0, 0}, Point{5, 0}},
			&Line{Point{2, 2}, Point{2, -2}},
			true,
		},
		{
			"lines with negative coordinates",
			&Line{Point{-1, -1}, Point{-4, -4}},
			&Line{Point{-1, -1}, Point{-2, 2}},
			true,
		},
		{
			"one line is a point",
			&Line{Point{0, 0}, Point{0, 0}},
			&Line{Point{0, 0}, Point{3, 3}},
			false,
		},
		{
			"lines with decimal coordinates",
			&Line{Point{0.5, 0.5}, Point{3.5, 3.5}},
			&Line{Point{0.5, 0.5}, Point{4.5, -4.5}},
			true,
		},
		{
			"lines with zero slope",
			&Line{Point{0, 1}, Point{3, 1}},
			&Line{Point{0, 0}, Point{1, 3}},
			false,
		},
		{
			"nil input",
			nil,
			&Line{Point{0, 0}, Point{1, 3}},
			false,
		},
		{
			"overflow inputs",
			&Line{Point{1e100, 1e110}, Point{1e200, 1e210}},
			&Line{Point{1e100, 1e110}, Point{1e200, -1e210}},
			false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// handle nil inputs to prevent panic
			if tt.l1 == nil || tt.l2 == nil {
				defer func() {
					if err := recover(); err != nil {
						t.Errorf("panic occured with nil input, error: %v", err)
					}
				}()
			}

			if got := IsPerpendicular(tt.l1, tt.l2); got != tt.want {
				t.Errorf("IsPerpendicular() = %v, want %v", got, tt.want)
			}
		})
	}
}
