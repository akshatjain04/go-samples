/*
Test generated by RoostGPT for test go-samples-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

Test Scenario 1:
Test the EuclideanDistance function with two points of the same dimension.
Input: p1 = [1, 2, 3], p2 = [4, 5, 6]
Expected Output: Euclidean distance between p1 and p2

Test Scenario 2:
Test the EuclideanDistance function with two points of different dimensions.
Input: p1 = [1, 2, 3], p2 = [1, 2]
Expected Output: Error message indicating mismatched dimensions

Test Scenario 3:
Test the EuclideanDistance function with two points, where each point is a single dimension.
Input: p1 = [1], p2 = [4]
Expected Output: Euclidean distance between p1 and p2

Test Scenario 4:
Test the EuclideanDistance function with identical points.
Input: p1 = [1, 2, 3], p2 = [1, 2, 3]
Expected Output: Euclidean distance is 0

Test Scenario 5:
Test the EuclideanDistance function with two points, where one or both points are empty.
Input: p1 = [], p2 = [1, 2, 3]
Expected Output: Error message indicating mismatched dimensions

Test Scenario 6:
Test the EuclideanDistance function with two points, where points contain negative values.
Input: p1 = [-1, -2, -3], p2 = [1, 2, 3]
Expected Output: Euclidean distance between p1 and p2

Test Scenario 7:
Test the EuclideanDistance function with two points of high dimensionality.
Input: Two points, each consisting of 1000 dimensions.
Expected Output: Euclidean distance between the two points

Test Scenario 8:
Test the EuclideanDistance function with two points having decimal values.
Input: p1 = [1.5, 2.5, 3.5], p2 = [4.5, 5.5, 6.5]
Expected Output: Euclidean distance between p1 and p2
*/
package geometry

import (
	"errors"
	"math"
	"testing"
)

type EuclideanPoint []float64

var ErrDimMismatch = errors.New("dimension mismatch")

func TestEuclideanDistance_04982223c5(t *testing.T) {
	var tests = []struct {
		p1, p2  EuclideanPoint
		want    float64
		wantErr error
	}{
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, math.Sqrt(27), nil},
		{[]float64{1, 2, 3}, []float64{1, 2}, -1, ErrDimMismatch},
		{[]float64{1}, []float64{4}, 3, nil},
		{[]float64{1, 2, 3}, []float64{1, 2, 3}, 0, nil},
		{[]float64{}, []float64{1, 2, 3}, -1, ErrDimMismatch},
		{[]float64{-1, -2, -3}, []float64{1, 2, 3}, math.Sqrt(56), nil},
		{ /* TODO: Test with high-dimensional input*/ },
		{[]float64{1.5, 2.5, 3.5}, []float64{4.5, 5.5, 6.5}, math.Sqrt(27), nil},
	}

	for _, tt := range tests {
		res, err := EuclideanDistance(tt.p1, tt.p2)
		if err != tt.wantErr || (err == nil && !almostEqual(res, tt.want)) {
			t.Errorf("EuclideanDistance(%v, %v) = (%v, %v); want (%v, %v)", tt.p1, tt.p2, res, err, tt.want, tt.wantErr)
		}
		if tt.wantErr == nil {
			t.Logf("EuclideanDistance(%v, %v) = %v", tt.p1, tt.p2, tt.want)
		}
	}
}

func almostEqual(a, b float64) bool {
	const float64EqualityThreshold = 1e-9
	return math.Abs(a-b) < float64EqualityThreshold
}
