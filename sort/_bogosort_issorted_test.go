// ********RoostGPT********
/*
Test generated by RoostGPT for test regex-functions-to-test-golang-test using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=isSorted_fa5110ab18
ROOST_METHOD_SIG_HASH=isSorted_ef8018aa66

FUNCTION_DEF=func isSorted[T constraints.Number](arr []T) bool
Scenario 1: Test with a sorted array
Details:
    Description: This test is meant to check whether the function correctly identifies a sorted array. The array contains numbers in ascending order.
Execution:
    Arrange: Create an array of sorted numbers.
    Act: Invoke the isSorted function with the sorted array as the parameter.
    Assert: The function should return true.
Validation:
    The assertion checks if the function correctly identifies a sorted array. The expected result is true since the array is sorted. This test is important to verify the basic functionality of the function.

Scenario 2: Test with an unsorted array
Details:
    Description: This test is meant to check whether the function correctly identifies an unsorted array. The array contains numbers in random order.
Execution:
    Arrange: Create an array of unsorted numbers.
    Act: Invoke the isSorted function with the unsorted array as the parameter.
    Assert: The function should return false.
Validation:
    The assertion checks if the function correctly identifies an unsorted array. The expected result is false since the array is not sorted. This test is important to ensure the function can accurately detect unsorted arrays.

Scenario 3: Test with an empty array
Details:
    Description: This test is meant to check whether the function handles an empty array correctly. According to the function logic, an empty array is considered sorted.
Execution:
    Arrange: Create an empty array.
    Act: Invoke the isSorted function with the empty array as the parameter.
    Assert: The function should return true.
Validation:
    The assertion checks if the function correctly handles an empty array. The expected result is true since an empty array is considered sorted. This test is important to ensure the function can handle edge cases.

Scenario 4: Test with a single element array
Details:
    Description: This test is meant to check whether the function handles an array with a single element correctly. According to the function logic, an array with a single element is considered sorted.
Execution:
    Arrange: Create an array with a single element.
    Act: Invoke the isSorted function with the single element array as the parameter.
    Assert: The function should return true.
Validation:
    The assertion checks if the function correctly handles an array with a single element. The expected result is true since an array with a single element is considered sorted. This test is important to ensure the function can handle edge cases.
*/

// ********RoostGPT********
package sort

import (
	"testing"
)

// TestIsSorted tests the isSorted function
func TestIsSorted(t *testing.T) {
	// Define test cases
	tests := []struct {
		name string
		arr  []int
		want bool
	}{
		{
			name: "Test with a sorted array",
			arr:  []int{1, 2, 3, 4, 5},
			want: true,
		},
		{
			name: "Test with an unsorted array",
			arr:  []int{5, 2, 3, 1, 4},
			want: false,
		},
		{
			name: "Test with an empty array",
			arr:  []int{},
			want: true,
		},
		{
			name: "Test with a single element array",
			arr:  []int{1},
			want: true,
		},
	}

	// Run test cases
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := isSorted(tt.arr); got != tt.want {
				t.Errorf("isSorted() = %v, want %v", got, tt.want)
				t.Log("Scenario failed: ", tt.name)
			} else {
				t.Log("Scenario passed: ", tt.name)
			}
		})
	}
}

func isSorted(arr []int) bool {
	for i := 0; i < len(arr)-1; i++ {
		if arr[i] > arr[i+1] {
			return false
		}
	}

	return true
}
